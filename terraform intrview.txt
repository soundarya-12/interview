### 1. What is Terraform?
Terraform is an open-source Infrastructure as Code (IaC) tool that allows you to define, manage, and 
provision infrastructure resources using declarative code.

### 2. How does Terraform work with AWS?
Terraform interacts with the AWS API to create and manage resources based on the configurations defined in Terraform files.

### 3. What is an AWS provider in Terraform?
An AWS provider in Terraform is a plugin that allows Terraform to interact with AWS services by making API calls.

### 4. How do you define resources in Terraform?
Resources are defined in Terraform using HashiCorp Configuration Language (HCL) syntax in `.tf` files. 
Each resource type corresponds to an AWS service.

What is a state file in Terraform?
A state file is a file in which Terraform keeps track of all the infrastructure that is deployed by it.

What is the best way to store the terraform state file?
The best way to store the state file is to keep it in the remote backend like S3 or 
GitLab-managed terraform state so, that whenever multiple people are working on 
the same code resource duplication wonâ€™t happen.

What is a plugin in Terraform?
The plugin is responsible for converting the HCL code into API calls and 
sends the request to the appropriate provider (AWS, GCP)

Q4: What is terraform state locking?
Whenever we are working on any terraform code and do terraform plan, apply or destroy 
terraform will lock the state file in order to prevent the destructive action.

Q5: What is Terraform backend?
A backend defines where Terraform stores its state data files. 
Terraform uses persisted state data to keep track of the resources it manages.

### 6. How can you initialize a Terraform project?
You can initialize a Terraform project using the `terraform init` command. 
It downloads required provider plugins and initializes the backend.

### 7. How do you plan infrastructure changes in Terraform?
You can use the `terraform plan` command to see the changes that 
Terraform will apply to your infrastructure before actually applying them.

### 8. What is the `terraform apply` command used for?
The `terraform apply` command applies the changes defined in your Terraform configuration to your infrastructure. 
It creates, updates, or deletes resources as needed.

### 9. What is the purpose of Terraform variables?
Terraform variables allow you to parameterize your configurations, 
making them more flexible and reusable across different environments.

### 10. How do you manage secrets and sensitive information in Terraform?
Sensitive information should be stored in environment variables or external systems 
like AWS Secrets Manager. You can use variables to reference these values in Terraform.

### 11. What is remote state in Terraform?
Remote state in Terraform refers to storing the state file on a remote backend, 
such as Amazon S3, instead of locally. This facilitates collaboration and enables locking.

### 12. How can you manage multiple environments (dev, prod) with Terraform?
You can use Terraform workspaces or create separate directories for each environment, 
each with its own state file and variables.

### 13. How do you handle dependencies between resources in Terraform?
Terraform automatically handles dependencies based on the resource definitions in your configuration. 
It will create resources in the correct order.

### 14. What is Terraform's "apply" process?
The "apply" process in Terraform involves comparing the desired state from your configuration to the current state,
generating an execution plan, and then applying the changes.

### 15. How can you manage versioning of Terraform configurations?
You can use version control systems like Git to track changes to your Terraform configurations. 
Additionally, Terraform Cloud and Enterprise offer versioning features.

### 16. What is the difference between Terraform and CloudFormation?
Terraform is a multi-cloud IaC tool that supports various cloud providers, including AWS. 
CloudFormation is AWS-specific and focuses on AWS resource provisioning.

### 17. What is a Terraform module?
A Terraform module is a reusable set of configurations that can be 
used to create multiple resources with a consistent configuration.

### 18. How can you destroy infrastructure created by Terraform?
You can use the `terraform destroy` command to remove all resources 
defined in your Terraform configuration.

### 19. How does Terraform manage updates to existing resources?
Terraform applies updates by modifying existing resources rather than recreating them. 
This helps preserve data and configurations.

### 20. Can Terraform be used for managing third-party resources?
Yes, Terraform has the capability to manage resources beyond AWS. 
It supports multiple providers, making it versatile for managing various cloud and on-premises resources.

What are Use Cases Of Terraform?
Following are the some of the use cases of terraform.

Provisioning Cloud Resources: Different types of cloud resources can be provisioned by using 
terraform like AWS,GCP, and others. The resources can be managed are compute, storage, networking, and application services.

Multi-Cloud Management: You can manage the infrastructure of different cloud platform at a 
time which will helps you to maintain the multi-cloud or hybrid cloud environments.

Infrastructure Versioning and Collaboration: You can store the scripts which have been written to 
provision the infrastructure in the version control system like git form where other teams 
can collaborate on infrastructure changes, track revisions, and roll back to previous states if needed.

Automation and Continuous Integration/Continuous Deployment (CI/CD): You can also integrate the terraform 
into you CI/CD pipelines where ever the build is triggered if there is any changes the infrastructure will upgrades automatically.

IAC-> infrastruction as code. this is a process of managing or creating the infrastructure using code. not by the manual process.
terraform is popular IAC
it is one single code which is used to automate the entire infrastructure cloud,because it details with with APIs terraform will use to automate the infrastructure.
terraform is used to intergrate with IAS the infrastructure.

what are modules in terraform
-----------------------------
modules is nothing but logical grouping of resources

what is statefile in terraform
-----------------------------
it keeps a track of resources that terraform is managing.
whatever the resources that we have created in terraform is actually stored in the state file so that the 
terraform knows that this s a resources that is managing and if someone tries to delete or someone 
tries to create something new. terraform trying to notify someone is trying to create or delete it that is the purpose of statefile.

the most common terraform CLI commands that you use everyday is:-
---------------------------------------------------------------

terraform init
terraform plan
terraform apply
terraform refresh

what is terraform backend
terraform is nothing but where terraform stores its state file. where-ever we are keeping 
your track of statefile,where-ever you are storing the statefile,that will become the terraform backend

what is terrafrom remote backend?
this is used to lock the backend when other user wants to use the terraform file which helps in avoiding the conflicts between the two user 

how do you handle secrets in terraform 	

we need to have an common or an effective solution of handling sensitive information.
we can use terraform remote backend instead storing a terraform state or scripts in your laptop. we can store in romte backend or S3 bucket.
enforce with strict IAM or RBACK to make sure that only restricted people can access those S3 bucket,read the secrets in the state.

resource graph in terraform 
it s basically dependency graph that terrform is trying to build and using this terraform dependency graph 

terraform state locking
avoiding conflict between the user 


docker
what is docker?
how containers are different from virtual machines
what is docker life cycle?
what are the different docker components?
what is the diff b/w docker COPY and docker ADD?
what is the diff b/w CMD and Entry point in docker
what are the networking types in docker and what is the default?
can you explain how to isolate networking betw the containers
what is a multistage in docker
ehat are distroless images in docker?


 
